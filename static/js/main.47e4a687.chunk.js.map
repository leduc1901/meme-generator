{"version":3,"sources":["components/uploadSite.js","action/memeActions.js","action/actionTypes.js","components/editSite.js","reducer/index.js","App.js","serviceWorker.js","index.js"],"names":["beforeUpload","file","isJpgOrPng","type","message","error","isLt2M","size","uploadSite","props","handleChange","info","status","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","getBase64","originFileObj","imageUrl","setState","loading","saveImage","console","log","dispatchChangeSite","state","uploadButton","this","LoadingOutlined","PlusOutlined","className","startEditingButton","onClick","to","name","listType","showUploadList","action","onChange","src","alt","style","width","Component","connect","dispatch","url","changeSite","InputGroup","Input","Group","Option","Select","display","alignItems","justifyContent","fontWeight","editSite","renderText","line","map","e","i","Object","assign","fontSize","color","position","x","y","onDragStop","d","prevState","item","id","value","changeValue","changeColor","changeSize","parseInt","renderInput","compact","defaultValue","target","placeholder","snapShot","scrnshot","document","getElementById","html2canvas","allowTaint","then","canvas","link","createElement","download","href","toDataURL","click","addNewInput","length","height","returnPage","dispatchReturnSite","defaultState","store","createStore","App","path","process","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.47e4a687.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Upload , message , Button} from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport {  LoadingOutlined, PlusOutlined  } from \"@ant-design/icons\"\r\nimport {connect} from \"react-redux\"\r\nimport {changeSite} from \"../action/memeActions\"\r\nimport {  Link } from \"react-router-dom\"\r\n\r\nfunction getBase64(img, callback) {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('load', () => callback(reader.result));\r\n    reader.readAsDataURL(img);\r\n  }\r\n  \r\nfunction beforeUpload(file) {\r\n    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\r\n    if (!isJpgOrPng) {\r\n      message.error('You can only upload JPG/PNG file!');\r\n    }\r\n    const isLt2M = file.size / 1024 / 1024 < 2;\r\n    if (!isLt2M) {\r\n      message.error('Image must smaller than 2MB!');\r\n    }\r\n    return isJpgOrPng && isLt2M;\r\n  }\r\n\r\n\r\n\r\nclass uploadSite extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            loading : false\r\n        }\r\n    }\r\n\r\n    handleChange = info => {\r\n        if (info.file.status === 'uploading') {\r\n          this.setState({ loading: true });\r\n          return;\r\n        }\r\n        if (info.file.status === 'done') {\r\n          getBase64(info.file.originFileObj, imageUrl =>\r\n            this.setState({\r\n              imageUrl,\r\n              loading: false,\r\n            }),\r\n          );\r\n        }\r\n      };\r\n\r\n    saveImage = () => {\r\n        console.log(1)\r\n        this.props.dispatchChangeSite(this.state.imageUrl)\r\n    }\r\n\r\n    render() {\r\n\r\n        const uploadButton = (\r\n            <div>\r\n              {this.state.loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n              <div className=\"ant-upload-text\">Upload</div>\r\n            </div>\r\n          );\r\n\r\n        const startEditingButton = (\r\n            <Button type=\"primary\" size=\"large\" onClick={this.saveImage}>\r\n                <Link to=\"/edit\">Bắt Đầu Chỉnh Sửa</Link>     \r\n            </Button>\r\n        )\r\n          \r\n        const { imageUrl } = this.state;\r\n\r\n        return (\r\n            <div className=\"uploadPage\">\r\n                <h2>Hãy bấm nút để upload meme bạn muốn edit, hoặc kéo thả </h2>\r\n                <Upload\r\n                    name=\"avatar\"\r\n                    listType=\"picture-card\"\r\n                    className=\"avatar-uploader\"\r\n                    showUploadList={false}\r\n                    action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n                    beforeUpload={beforeUpload}\r\n                    onChange={this.handleChange}\r\n                >\r\n                    {imageUrl ? <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\r\n                </Upload>\r\n                {imageUrl ? startEditingButton : \"\"}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        dispatchChangeSite : (url) => dispatch(changeSite(url))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps , mapDispatchToProps)(uploadSite)\r\n","import * as actionType from \"./actionTypes\"\r\n\r\nexport function changeSite(url){\r\n    return {\r\n        type : actionType.CHANGE_SITE,\r\n        url\r\n\r\n    }\r\n}\r\n\r\nexport function returnSite(){\r\n    return {\r\n        type : actionType.RETURN_SITE\r\n    }\r\n}","export const CHANGE_SITE = \"CHANGE_SITE\";\r\nexport const RETURN_SITE = \"RETURN_SITE\"","import React, { Component } from 'react'\r\nimport {connect} from \"react-redux\"\r\nimport {Select , Input} from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport { saveAs } from 'file-saver';\r\nimport { Rnd } from \"react-rnd\";\r\nimport {  message , Button} from 'antd';\r\nimport html2canvas from 'html2canvas';\r\nimport {returnSite} from \"../action/memeActions\"\r\nimport {  Link } from \"react-router-dom\"\r\n\r\nconst InputGroup = Input.Group;\r\nconst {Option} = Select\r\n\r\nconst style = {\r\n    display: \"inline-block\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    fontWeight : \"bolder\",\r\n    width : \"max-content\"\r\n}\r\n\r\nexport class editSite extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            line : [\r\n                {\r\n                    id : 0,\r\n                    x : 100,\r\n                    y : 30,\r\n                    height : 30,\r\n                    value : \"Dòng Trên\",\r\n                    color : \"white\",\r\n                    fontSize : 40,\r\n                    \r\n                } ,\r\n\r\n                {\r\n                    id : 1,\r\n                    x : 300,\r\n                    y : 300,\r\n                    height : 30,\r\n                    color : \"white\",\r\n                    value : \"Dòng Dưới\",\r\n                    fontSize : 40\r\n                }\r\n            ]\r\n                \r\n            \r\n        }\r\n    }\r\n//x: d.x, y: d.y \r\n    renderText = () => {\r\n        \r\n        let renderTxt = this.state.line.map((e , i) => {\r\n            return (\r\n                <Rnd\r\n                    style={Object.assign({} , style , \r\n                        {   fontSize : e.fontSize , \r\n                            color : e.color\r\n                        }\r\n                    )}\r\n\r\n                    position={{ x: e.x + (i*10) , y: e.y + (i*10) }}\r\n                    onDragStop={(e, d) => {\r\n                        this.setState(prevState => ({\r\n                            line : prevState.line.map(\r\n                                item => item.id === i ?{\r\n                                    ...item,\r\n                                    x : d.x,\r\n                                    y : d.y\r\n                                }:item\r\n                            )\r\n                        }));\r\n                    }}\r\n                    \r\n                >\r\n                    {e.value }\r\n                </Rnd>\r\n            )\r\n        })\r\n        return renderTxt\r\n    }\r\n\r\n    changeValue = (e , id) => {\r\n        this.setState(prevState => ({\r\n            line : prevState.line.map(\r\n                item => item.id === id ?{\r\n                    ...item,\r\n                    value : e\r\n                }:item\r\n            )\r\n        }));\r\n       \r\n    }\r\n\r\n    changeColor = (value ,id) => {\r\n        this.setState(prevState => ({\r\n            line : prevState.line.map(\r\n                item => item.id === id ?{\r\n                    ...item,\r\n                    color : value\r\n                }:item\r\n            )\r\n        }));\r\n    }\r\n\r\n    changeSize = (value , id) => {\r\n        console.log(value)\r\n        this.setState(prevState => ({\r\n            line : prevState.line.map(\r\n                item => item.id === id ?{\r\n                    ...item,\r\n                    fontSize : parseInt(value)\r\n                }:item\r\n            )\r\n        }));\r\n    }\r\n\r\n    renderInput = () => {\r\n        let renderInput = this.state.line.map((e , i ) => {\r\n            return (\r\n                <InputGroup compact>\r\n                    <Select id=\"color\" onChange={(value) => this.changeColor(value , i)} defaultValue=\"White\">\r\n                        <Option value=\"White\">White</Option>\r\n                        <Option value=\"Black\">Black</Option>\r\n                    </Select>\r\n                    <Select id=\"size\" onChange={(value) => this.changeSize(value , i)} defaultValue=\"40px\">\r\n                        <Option value=\"10\">10px</Option>\r\n                        <Option value=\"20\">20px</Option>\r\n                        <Option value=\"30\">30px</Option>\r\n                        <Option value=\"40\">40px</Option>\r\n                        <Option value=\"50\">50px</Option>\r\n                        <Option value=\"60\">60px</Option>\r\n                    </Select>\r\n                    <Input onChange={(e) => this.changeValue(e.target.value , i)}  defaultValue={e.value} placeholder={e.value} />\r\n                </InputGroup>\r\n            )\r\n        })\r\n        return renderInput\r\n    }\r\n\r\n    snapShot = () => {\r\n        let scrnshot =  document.getElementById(\"img-area\")\r\n        html2canvas(scrnshot, { allowTaint: true }).then(function (canvas) {\r\n            var link = document.createElement('a');\r\n            link.download = 'filename.png';\r\n            link.href = canvas.toDataURL(\"image/jpeg\");\r\n            link.click();\r\n        });\r\n    }\r\n\r\n    addNewInput = () => {\r\n        if(this.state.line.length <= 10){\r\n            this.setState({\r\n                line : [...this.state.line , {\r\n                    id : this.state.line.length,\r\n                    x : 50,\r\n                    y : 30,\r\n                    height : 30,\r\n                    value : \"Dòng Mới\",\r\n                    color : \"white\",\r\n                    fontSize : 40,\r\n                }]\r\n            })\r\n        }\r\n    }\r\n\r\n    returnPage = () => {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Edit Ảnh Tại Đây</h1>\r\n                <div className=\"edit-area\">\r\n                    <div id=\"img-area\">\r\n                        <img className=\"edit-img\" src={this.props.imageUrl} />\r\n                        \r\n                        {this.renderText()}\r\n                        <img width=\"75%\" id=\"screen\"></img>\r\n                    </div>\r\n                    <div className=\"input-area\">\r\n                        <Button className=\"generate\" size=\"large\" onClick={this.snapShot} type=\"primary\">Tải Xuống</Button>\r\n                        <Button className=\"addNew\" size=\"large\"  onClick={this.addNewInput} type=\"primary\">Thêm Dòng Mới</Button>\r\n                        {this.renderInput()}\r\n                        <Button className=\"returnPageBtn\" size=\"large\"  onClick={this.addNewInput} type=\"primary\">\r\n                            <Link to=\"/\">Upload Ảnh Khác</Link>\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        imageUrl : state.imageUrl\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        dispatchReturnSite : () => dispatch(returnSite())\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps , mapDispatchToProps)(editSite)\r\n","import * as actionType from \"../action/actionTypes\"\r\n\r\nconst defaultState = {\r\n    imageUrl : \"\"\r\n}\r\n\r\nexport default function memeReducer(state = defaultState , action){\r\n    switch(action.type){\r\n        case actionType.CHANGE_SITE:\r\n            return Object.assign({} , state , {\r\n                imageUrl : action.url\r\n            });\r\n        case actionType.RETURN_SITE:\r\n                return Object.assign({} , state , {\r\n                    imageUrl : \"\"\r\n                });\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport { BrowserRouter , Route , Switch, Link } from \"react-router-dom\"\nimport uploadSite from \"./components/uploadSite\"\nimport editSite from \"./components/editSite\"\nimport \"./App.css\"\nimport reducer from \"./reducer\"\nimport {createStore} from \"redux\"\nimport {Provider} from 'react-redux';\n\nlet store = createStore(reducer)\n\nfunction App() {\n  return (\n    <Provider store={store}>\n        <BrowserRouter >\n          \n          <div className=\"App\">\n            <h1>Meme Generator</h1>\n            <Switch>\n              <Route path={process.env.PUBLIC_URL +\"/\"} exact component={uploadSite}></Route>\n              <Route path={process.env.PUBLIC_URL +\"/edit\"} exact component={editSite}></Route>\n            </Switch>\n          </div>\n          \n        </BrowserRouter>\n    \n        </Provider>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}